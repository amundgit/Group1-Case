package api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.ResponseBody;

//New imports
import api.Repositories.*;
import api.Models.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;

@Controller // This means that this class is a Controller
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private PersonRepository personRepository;

	@Autowired
	private AddressRepository addressRepository;

	@Autowired
	private LocationRepository locationRepository;

	@PostMapping(path = "/adduser")
	public @ResponseBody String addNewUser(@RequestBody Map<String, Object> body) {

		if (userRepository.findByName(body.get("name").toString()) != null) {
			return "Failure: Name taken";
		} else {
			User n = new User();
			n.setName(body.get("name").toString());
			n.setPassword(body.get("password").toString());
			userRepository.save(n);
			return "Success";
		}
	}
	// old
	/*
	 * @PostMapping(path="/adduser") public @ResponseBody String addNewUser
	 * (@RequestBody User newUser) { if(userRepository.findByName(newUser.getName())
	 * != null){ return "Failure: Name taken"; }else{ User n = new User();
	 * n.setName(newUser.getName()); n.setPassword(newUser.getPassword());
	 * userRepository.save(n); return "Success"; } }
	 */

	/**
	 * This method is used at login, to determene if the user and what type of role
	 * it has.
	 */
	@PostMapping(path = "/finduser")
	public @ResponseBody String findUser(@RequestBody User myUser) {
		boolean check = false;
		User user = userRepository.verifyUser(myUser.getName(), myUser.getPassword());
		if (user != null) {
			check = user.getStatus().equals("active");
		}

		if (check) {
			if (user.getRole() == 0) {
				return "User";
			} else {
				return "Admin";
			}
		} else {
			return "Failure";
		}
	}

	/**
	 * This method creates a new address if it does not exist and checks based on
	 * the first address line.
	 * 
	 * @param newAddress
	 * @return
	 */
	@PostMapping(path = "/addAddress")
	public @ResponseBody String addAddress(@RequestBody Address newAddress) {
		boolean check = false;
		Address address = addressRepository.getByAddress(newAddress.getAddressLine1());
		if (address == null) {
			check = true;
		}
		if (check) {
			addressRepository.save(newAddress);
			address = addressRepository.getByAddress(newAddress.getAddressLine1());
			System.out.println(address.getId().toString());
			return address.getId().toString();
		} else {
			return "Failure";
		}
	}

	/**
	 * This method creates a new location if it does not exist and checks based on
	 * the name.
	 * 
	 * @param newLocation
	 * @return
	 */
	@PostMapping(path = "/addLocation")
	public @ResponseBody String addLocation(@RequestBody Location newLocation) {
		boolean check = false;
		Location location = locationRepository.getByName(newLocation.getName());
		if (location == null) {
			check = true;
		}
		if (check) {
			locationRepository.save(newLocation);
			return "Success";
		} else {
			return "Failure";
		}
	}

	@PostMapping(path = "/addPerson")
	public @ResponseBody String addPerson(@RequestBody Person newPerson) {
		boolean check = false;
		Person person = personRepository.findByFirstAndLastandBirth(newPerson.getFirstName(), newPerson.getLastName(),
				newPerson.getDateOfBirth());
		if (person == null) {
			check = true;
		}
		if (check) {
			personRepository.save(newPerson);
			return "Success";
		} else {
			return "Failure";
		}
	}

	@GetMapping(path = "/getallusers")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	// test, works. Syntax: /demo/search?name=searchname
	/*
	 * @GetMapping(path="/search") public @ResponseBody Iterable<User>
	 * getAUser(@RequestParam String name) { return userRepository.findByName(name);
	 * }
	 */
	// testing non-list
	@GetMapping(path = "/search")
	public @ResponseBody User getAUser(@RequestParam String name) {
		return userRepository.findByName(name);
	}

	@PostMapping(path = "/searchuser")
	public @ResponseBody String searchUser(@RequestBody User myUser) {
		boolean check = false;
		User user = userRepository.findByName(myUser.getName());
		if (user != null) {
			check = user.getStatus().equals("active");
		}

		if (check) {
			return "Success";
		} else {
			return "Failure";
		}
	}

	@GetMapping(path = "/updateusername")
	public @ResponseBody String updateAUserName(@RequestParam String oldName, @RequestParam String newName) {
		User u = (userRepository.findByName(oldName));
		u.setName(newName);
		userRepository.save(u);
		return "Updated";
	}

	@GetMapping(path = "/updatepw")
	public @ResponseBody String updateAUserPW(@RequestParam String name, @RequestParam String oldPw,
			@RequestParam String newPw) {
		User u = (userRepository.verifyUser(name, oldPw));
		u.setPassword(newPw);
		userRepository.save(u);
		return "Updated";
	}

	@GetMapping(path = "/deleteuser")
	public @ResponseBody String deleteAUser(@RequestParam String name) {
		User u = (userRepository.findByName(name));
		u.setStatus("inactive");
		userRepository.save(u);
		return "Updated";
	}

	// PERSONTEST follows
	@GetMapping(path = "/addP") // Map ONLY GET Requests
	public @ResponseBody String addNewPerson(@RequestParam Integer addressID, @RequestParam String firstName,
			@RequestParam String lastName, @RequestParam String bday) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		List<Person> test = new ArrayList<>();
		test = personRepository.findByFirstAndLast(firstName, lastName);
		System.out.println(test.isEmpty());
		if (!test.isEmpty()) {
			return "Error: Name taken";
		} else {
			Person p = new Person();
			p.setAddressId(addressRepository.getById(addressID));
			p.setFirstName(firstName);
			p.setLastName(lastName);
			p.setDateOfBirth(bday);
			personRepository.save(p);
			return "Saved";
		}
	}

	// test
	@GetMapping(path = "/searchPfirst")
	public @ResponseBody Iterable<Person> getAPersonByFirstName(@RequestParam String name) {
		return personRepository.findByFirstName(name);
	}

	@GetMapping(path = "/searchPlast")
	public @ResponseBody Iterable<Person> getAPersonByLastName(@RequestParam String name) {
		return personRepository.findByLastName(name);
	}

	@GetMapping(path = "/searchP")
	public @ResponseBody Iterable<Person> getAPersonByFirstAndLast(@RequestParam String firstName,
			@RequestParam String lastName) {
		return personRepository.findByFirstAndLast(firstName, lastName);
	}

	// ADDRESS TESTING FOLLOWS
	@GetMapping(path = "/getalladdresses")
	public @ResponseBody Iterable<Address> getAllAddresses() {
		return addressRepository.findAll();
	}

	/**
	 * Get to show all locations in the database
	 */
	@GetMapping(path = "/getalllocations")
	public @ResponseBody Iterable<Location> getAllLocations() {
		return locationRepository.findAll();
	}

	/**
	 * Get to show all Persons in the database
	 */
	@GetMapping(path = "/getallpersons")
	public @ResponseBody Iterable<Person> getAllPersons() {
		return personRepository.findAll();
	}

	@GetMapping(path = "/getaddressbyid")
	public @ResponseBody Address getAddressById(@RequestParam Integer id) {
		return addressRepository.getById(id);
	}

}