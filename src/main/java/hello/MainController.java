package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.User;
import hello.UserRepository;

import java.util.List;
import java.util.ArrayList;

import hello.Person;
import hello.PersonRepository;

@Controller    // This means that this class is a Controller
<<<<<<< HEAD
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
=======
>>>>>>> 5f64f92c07c1b72cc5a2c630dc95a03c8f7d3933
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private PersonRepository personRepository;

	/*@GetMapping(path="/add" ) // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String pw) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		//Syntax:/demo/add?name=testname&pw=somepassword
		User n = new User();
		n.setName(name);
		n.setPassword(pw);
		userRepository.save(n);
		return "Saved";
	}*/

<<<<<<< HEAD
	@PostMapping(path="/adduser") // Map ONLY POST Requests
	public @ResponseBody String paddNewUser (@RequestParam Map<String, String> body) {
=======
	/*@PostMapping(path="/padd", consumes = "text/plain") // Map ONLY POST Requests
	public @ResponseBody String paddNewUser (@RequestBody String jsonStr) {
>>>>>>> 5f64f92c07c1b72cc5a2c630dc95a03c8f7d3933
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User n = new User();
<<<<<<< HEAD
		n.setName(body.get("name"));
		n.setPassword(body.get("pw"));
		return userRepository.save(n);
	}
=======
		n.setName();
		n.setPassword(jObject[0].pw);
		userRepository.save(n);
		return "Saved";
	}*/
>>>>>>> 5f64f92c07c1b72cc5a2c630dc95a03c8f7d3933

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	//test, works. Syntax: /demo/search?name=searchname
	/*@GetMapping(path="/search")
	public @ResponseBody Iterable<User> getAUser(@RequestParam String name) {
		return userRepository.findByName(name);
	}*/
	//testing non-list
	@GetMapping(path="/search")
	public @ResponseBody User getAUser(@RequestParam String name) {
		return userRepository.findByName(name);
	}

	@GetMapping(path="/updateusername")
	public @ResponseBody String updateAUser(@RequestParam String oldName,@RequestParam String newName) {
		User u = (userRepository.findByName(oldName));
		u.setName(newName);
		userRepository.save(u);
		return "Updated";
	}

	@GetMapping(path="/updatepw")
	public @ResponseBody String updateAUser(@RequestParam String name,@RequestParam String oldPw,@RequestParam String newPw) {
		User u = (userRepository.verifyUser(name,oldPw));
		u.setPassword(newPw);
		userRepository.save(u);
		return "Updated";
	}

	//PERSONTEST follows
	@GetMapping(path="/addP") // Map ONLY GET Requests
	public @ResponseBody String addNewPerson (@RequestParam Integer addressID, @RequestParam String firstName, @RequestParam String lastName
			, @RequestParam String bday) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		List<Person> test = new ArrayList<>();
		test = personRepository.findByFirstAndLast(firstName,lastName);
		System.out.println(test.isEmpty());
		if(!test.isEmpty()){
			return "Error: Name taken";
		}else{
			Person p = new Person();
			p.setAddressId(addressID);
			p.setFirstName(firstName);
			p.setLastName(lastName);
			p.setDateOfBirth(bday);
			personRepository.save(p);
			return "Saved";
		}
	}

	@GetMapping(path="/allP")
	public @ResponseBody Iterable<Person> getAllPersons() {
		// This returns a JSON or XML with the users
		return personRepository.findAll();
	}
	//test
	@GetMapping(path="/searchPfirst")
	public @ResponseBody Iterable<Person> getAPersonByFirstName(@RequestParam String name) {
		return personRepository.findByFirstName(name);
	}
	@GetMapping(path="/searchPlast")
	public @ResponseBody Iterable<Person> getAPersonByLastName(@RequestParam String name) {
		return personRepository.findByLastName(name);
	}

	@GetMapping(path="/searchP")
	public @ResponseBody Iterable<Person> getAPersonByFirstAndLast(@RequestParam String firstName,@RequestParam String lastName) {
		return personRepository.findByFirstAndLast(firstName,lastName);
	}
}